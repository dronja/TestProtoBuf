// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: message.proto at 52:1
package com.dronja.testprotobufwire;;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class csmpMsgEncrProto extends Message<csmpMsgEncrProto, csmpMsgEncrProto.Builder> {
  public static final ProtoAdapter<csmpMsgEncrProto> ADAPTER = new ProtoAdapter_csmpMsgEncrProto();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_LSB16KEYINDEXPROTO = 0;

  public static final ByteString DEFAULT_CIPHERTEXTPROTO = ByteString.EMPTY;

  public static final Integer DEFAULT_CIPHERTEXTLEN = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer lsb16KeyIndexProto;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString cipherTextProto;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer cipherTextLen;

  public csmpMsgEncrProto(Integer lsb16KeyIndexProto, ByteString cipherTextProto, Integer cipherTextLen) {
    this(lsb16KeyIndexProto, cipherTextProto, cipherTextLen, ByteString.EMPTY);
  }

  public csmpMsgEncrProto(Integer lsb16KeyIndexProto, ByteString cipherTextProto, Integer cipherTextLen, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.lsb16KeyIndexProto = lsb16KeyIndexProto;
    this.cipherTextProto = cipherTextProto;
    this.cipherTextLen = cipherTextLen;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.lsb16KeyIndexProto = lsb16KeyIndexProto;
    builder.cipherTextProto = cipherTextProto;
    builder.cipherTextLen = cipherTextLen;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof csmpMsgEncrProto)) return false;
    csmpMsgEncrProto o = (csmpMsgEncrProto) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(lsb16KeyIndexProto, o.lsb16KeyIndexProto)
        && Internal.equals(cipherTextProto, o.cipherTextProto)
        && Internal.equals(cipherTextLen, o.cipherTextLen);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (lsb16KeyIndexProto != null ? lsb16KeyIndexProto.hashCode() : 0);
      result = result * 37 + (cipherTextProto != null ? cipherTextProto.hashCode() : 0);
      result = result * 37 + (cipherTextLen != null ? cipherTextLen.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (lsb16KeyIndexProto != null) builder.append(", lsb16KeyIndexProto=").append(lsb16KeyIndexProto);
    if (cipherTextProto != null) builder.append(", cipherTextProto=").append(cipherTextProto);
    if (cipherTextLen != null) builder.append(", cipherTextLen=").append(cipherTextLen);
    return builder.replace(0, 2, "csmpMsgEncrProto{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<csmpMsgEncrProto, Builder> {
    public Integer lsb16KeyIndexProto;

    public ByteString cipherTextProto;

    public Integer cipherTextLen;

    public Builder() {
    }

    public Builder lsb16KeyIndexProto(Integer lsb16KeyIndexProto) {
      this.lsb16KeyIndexProto = lsb16KeyIndexProto;
      return this;
    }

    public Builder cipherTextProto(ByteString cipherTextProto) {
      this.cipherTextProto = cipherTextProto;
      return this;
    }

    public Builder cipherTextLen(Integer cipherTextLen) {
      this.cipherTextLen = cipherTextLen;
      return this;
    }

    @Override
    public csmpMsgEncrProto build() {
      return new csmpMsgEncrProto(lsb16KeyIndexProto, cipherTextProto, cipherTextLen, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_csmpMsgEncrProto extends ProtoAdapter<csmpMsgEncrProto> {
    ProtoAdapter_csmpMsgEncrProto() {
      super(FieldEncoding.LENGTH_DELIMITED, csmpMsgEncrProto.class);
    }

    @Override
    public int encodedSize(csmpMsgEncrProto value) {
      return (value.lsb16KeyIndexProto != null ? ProtoAdapter.INT32.encodedSizeWithTag(1, value.lsb16KeyIndexProto) : 0)
          + (value.cipherTextProto != null ? ProtoAdapter.BYTES.encodedSizeWithTag(2, value.cipherTextProto) : 0)
          + (value.cipherTextLen != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.cipherTextLen) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, csmpMsgEncrProto value) throws IOException {
      if (value.lsb16KeyIndexProto != null) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.lsb16KeyIndexProto);
      if (value.cipherTextProto != null) ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.cipherTextProto);
      if (value.cipherTextLen != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.cipherTextLen);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public csmpMsgEncrProto decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.lsb16KeyIndexProto(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.cipherTextProto(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.cipherTextLen(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public csmpMsgEncrProto redact(csmpMsgEncrProto value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
